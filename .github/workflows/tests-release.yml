name: Release Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  # keep in sync with hardcoded refs below
  LATEST_PYTHON_VER: "3.10"
  # All python versions except latest
  PYTHON_VERSIONS: '[ "3.9", "3.8", "3.7", "3.6", "3.5", "2.7", "pypy3.8", "pypy3.7", "pypy2.7", "3.11-dev" ]'
  # keep in sync with hardcoded refs below
  LATEST_QBT_VER: "4.4.3.1"
  # All qBittorrent versions except latest
  QBT_VERS: '[ "4.4.1", "4.4.0", "4.3.9", "4.3.8", "4.3.7", "4.3.6", "4.3.5", "4.3.4.1", "4.3.3", "4.3.2", "4.3.1", "4.3.0.1" ]'
  QBT_LEGACY_VERS: '[ "4.2.5", "4.2.0", "4.1.6", "4.1.0" ]'
  QT_USE_DEFAULT_PAA: "4.3.9, 4.3.8, 4.3.7, 4.3.6, 4.3.5, 4.3.4.1, 4.3.3, 4.3.2, 4.3.1, 4.3.0.1"
  LIBTORRENT_VER: "2.0.7"
  SUBMIT_COVERAGE_VERSIONS: "2.7, 3.10"
  QBITTORRENTAPI_HOST: "localhost:8080"
  QBITTORRENTAPI_PASSWORD: "adminadmin"
  QBITTORRENTAPI_USERNAME: "admin"
  LIBTORRENT_INSTALLS: "${{ github.workspace }}/resources/libtorrent_installs"
  QBITTORRENT_INSTALLS: "${{ github.workspace }}/resources/qbittorrent_installs"
  GH_CI_CACHE_VERSION: "3"  # useful to effectively evict caches

jobs:
  verify:
    name: Get Ready
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    outputs:
      python-versions: ${{ steps.set-python-versions.outputs.python-versions }}
      qbittorrent-versions: ${{ steps.set-qbittorrent-versions.outputs.qbittorrent-versions }}
      qbittorrent-legacy-versions: ${{ steps.set-qbittorrent-legacy-versions.outputs.qbittorrent-legacy-versions }}
    steps:
      - name: Declare Python Versions for Testing
        id: set-python-versions
        run: echo "::set-output name=python-versions::$PYTHON_VERSIONS"

      - name: Declare qBittorrent Versions for Testing
        id: set-qbittorrent-versions
        run: echo "::set-output name=qbittorrent-versions::$QBT_VERS"

      - name: Declare Legacy qBittorrent Versions for Testing
        id: set-qbittorrent-legacy-versions
        run: echo "::set-output name=qbittorrent-legacy-versions::$QBT_LEGACY_VERS"

      - name: Branch
        run: echo Branch ${{ github.ref }} ${{ github.head_ref }}

      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.LATEST_PYTHON_VER }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}
          cache: 'pip'

      - name: Lint with Pre-commit
        uses: pre-commit/action@v3.0.0

  tests-smoke:
    #######
    # Run tests against latest qBittorrent release and latest Python release
    #######
    name: "Release Test 3.10 - v4.4.3.1"
    needs: verify
    runs-on: ubuntu-20.04  # update Qt PPA when moving beyond 20.04
    timeout-minutes: 25
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.LATEST_PYTHON_VER }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}
          cache: 'pip'

      - name: Cache libtorrent ${{ env.LIBTORRENT_VER }}
        # set up cache for libtorrent library
        id: cache-libtorrent
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{ env.LIBTORRENT_INSTALLS }}/libtorrent_${{ env.LIBTORRENT_VER }}
          key: libtorrent-installs-${{ env.GH_CI_CACHE_VERSION }}-${{ runner.os }}-${{ env.LIBTORRENT_VER }}

      - name: Cache qBittorrent ${{ env.LATEST_QBT_VER }}
        # set up cache for qBittorrent binary
        id: cache-qbittorrent
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{ env.QBITTORRENT_INSTALLS }}
          key: qbittorrent-installs-${{ env.GH_CI_CACHE_VERSION }}-${{ runner.os }}-${{ env.LATEST_QBT_VER }}-${{ env.LIBTORRENT_VER }}

      - name: Install OS Build Dependencies
        if: (steps.cache-libtorrent.outputs.cache-hit != 'true') || (steps.cache-qbittorrent.outputs.cache-hit != 'true')
        run: |
          sudo apt update
          sudo apt install --no-install-recommends build-essential cmake ninja-build pkg-config git zlib1g-dev libssl-dev \
            libgeoip-dev automake libtool libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev

      - name: Install OS Runtime Dependencies
        # qBt v4.4.0 requires >Qt v5.15.2....but that Qt isn't available from ubuntu PPAs until 21.04
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-focal
          sudo apt update
          sudo apt install --no-install-recommends qt515base qt515tools libqt5svg5-dev

      - name: Build libtorrent
        # if cache missed, build libtorrent library.
        if: steps.cache-libtorrent.outputs.cache-hit != 'true'
        run: |
          set -x
          SRC_DIR="$LIBTORRENT_INSTALLS/src"
          LIBTORRENT_INSTALL_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$LIBTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          git clone --recurse-submodules https://github.com/arvidn/libtorrent.git --branch v$LIBTORRENT_VER --depth 1
          cd libtorrent
          cmake \
            -B cmake-build-dir/Release \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$LIBTORRENT_INSTALL_DIR"
          cmake --build cmake-build-dir/Release --parallel $(nproc)
          cmake --install cmake-build-dir/Release

      - name: Build qBittorrent
        # if cache missed, compile qBittorrent binary
        if: steps.cache-qbittorrent.outputs.cache-hit != 'true'
        run: |
          set -x
          SRC_DIR="$QBITTORRENT_INSTALLS/src"
          QBITTORRENT_INSTALL_DIR="$QBITTORRENT_INSTALLS/qbt_$LATEST_QBT_VER"
          LIBTORRENT_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$QBITTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          rm -rf qBittorrent
          git clone https://github.com/qbittorrent/qBittorrent.git --branch release-$LATEST_QBT_VER --depth 1
          cd qBittorrent
          cmake \
            -G "Ninja" \
            -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$LIBTORRENT_DIR" \
            -DVERBOSE_CONFIGURE=ON \
            -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE \
            -DQBT_VER_STATUS= \
            -DGUI=OFF \
            -DCMAKE_INSTALL_PREFIX="$QBITTORRENT_INSTALL_DIR"
          cmake --build build --parallel $(nproc)
          cmake --install build

      - name: Install Python Dependencies
        # install the python dependencies to test qbittorrent-api
        run: |
          python -m pip install -U pip wheel setuptools
          python -m pip install .[test]

      - name: Test with pytest
        # finally....start qBittorrent and run tests via pytest
        run: |
          mkdir -p $HOME/Downloads  # default download location for qbittorrent
          export LD_LIBRARY_PATH="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER/lib/:$LD_LIBRARY_PATH"
          $QBITTORRENT_INSTALLS/qbt_$LATEST_QBT_VER/bin/qbittorrent-nox --daemon
          python -c "import sys; print('Python', sys.version)"
          $QBITTORRENT_INSTALLS/qbt_$LATEST_QBT_VER/bin/qbittorrent-nox -v
          export QBT_VER=$LATEST_QBT_VER  # tell pytest which qbittorrent is being tested
          pytest

      - name: Upload Coverage to Codecov
        # send coverage report from pytest to codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  tests-extended-python:
    #######
    # Run tests against latest qBittorrent release and all Python releases
    #######
    name: "Release Test ${{ matrix.python-version }} - v4.4.3.1"
    needs: [tests-smoke, verify]
    runs-on: ubuntu-20.04  # update Qt PPA when moving beyond 20.04
    continue-on-error: true
    timeout-minutes: 25
    strategy:
      matrix:
        python-version: ${{ fromJson(needs.verify.outputs.python-versions) }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Cache libtorrent ${{ env.LIBTORRENT_VER }}
        # set up cache for libtorrent library
        id: cache-libtorrent
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{ env.LIBTORRENT_INSTALLS }}/libtorrent_${{ env.LIBTORRENT_VER }}
          key: libtorrent-installs-${{ env.GH_CI_CACHE_VERSION }}-${{ runner.os }}-${{ env.LIBTORRENT_VER }}

      - name: Cache qBittorrent ${{ env.LATEST_QBT_VER }}
        # set up cache for qBittorrent binary
        id: cache-qbittorrent
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{ env.QBITTORRENT_INSTALLS }}
          key: qbittorrent-installs-${{ env.GH_CI_CACHE_VERSION }}-${{ runner.os }}-${{ env.LATEST_QBT_VER }}-${{ env.LIBTORRENT_VER }}

      - name: Install OS Build Dependencies
        if: (steps.cache-libtorrent.outputs.cache-hit != 'true') || (steps.cache-qbittorrent.outputs.cache-hit != 'true')
        run: |
          sudo apt update
          sudo apt install --no-install-recommends build-essential cmake ninja-build pkg-config git zlib1g-dev libssl-dev \
            libgeoip-dev automake libtool libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev

      - name: Install OS Runtime Dependencies
        # qBt v4.4.0 requires >Qt v5.15.2....but that Qt isn't available from ubuntu PPAs until 21.04
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-focal
          sudo apt update
          sudo apt install --no-install-recommends qt515base qt515tools libqt5svg5-dev

      - name: Build libtorrent
        # if cache missed, build libtorrent library.
        if: steps.cache-libtorrent.outputs.cache-hit != 'true'
        run: |
          set -x
          SRC_DIR="$LIBTORRENT_INSTALLS/src"
          LIBTORRENT_INSTALL_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$LIBTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          git clone --recurse-submodules https://github.com/arvidn/libtorrent.git --branch v$LIBTORRENT_VER --depth 1
          cd libtorrent
          cmake \
            -B cmake-build-dir/Release \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$LIBTORRENT_INSTALL_DIR"
          cmake --build cmake-build-dir/Release --parallel $(nproc)
          cmake --install cmake-build-dir/Release

      - name: Build qBittorrent
        # if cache missed, compile qBittorrent binary
        if: steps.cache-qbittorrent.outputs.cache-hit != 'true'
        run: |
          set -x
          SRC_DIR="$QBITTORRENT_INSTALLS/src"
          QBITTORRENT_INSTALL_DIR="$QBITTORRENT_INSTALLS/qbt_$LATEST_QBT_VER"
          LIBTORRENT_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$QBITTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          rm -rf qBittorrent
          git clone https://github.com/qbittorrent/qBittorrent.git --branch release-$LATEST_QBT_VER --depth 1
          cd qBittorrent
          cmake \
            -G "Ninja" \
            -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$LIBTORRENT_DIR" \
            -DVERBOSE_CONFIGURE=ON \
            -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE \
            -DQBT_VER_STATUS= \
            -DGUI=OFF \
            -DCMAKE_INSTALL_PREFIX="$QBITTORRENT_INSTALL_DIR"
          cmake --build build --parallel $(nproc)
          cmake --install build

      - name: Install Python Dependencies
        # install the python dependencies to test qbittorrent-api
        run: |
          python -m pip install -U pip wheel setuptools
          python -m pip install .[test]

      - name: Test with pytest
        # finally....start qBittorrent and run tests via pytest
        run: |
          mkdir -p $HOME/Downloads  # default download location for qbittorrent
          export LD_LIBRARY_PATH="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER/lib/:$LD_LIBRARY_PATH"
          $QBITTORRENT_INSTALLS/qbt_$LATEST_QBT_VER/bin/qbittorrent-nox --daemon
          python -c "import sys; print('Python', sys.version)"
          $QBITTORRENT_INSTALLS/qbt_$LATEST_QBT_VER/bin/qbittorrent-nox -v
          export QBT_VER=$LATEST_QBT_VER  # tell pytest which qbittorrent is being tested
          pytest

      - name: Upload Coverage to Codecov
        # send coverage report from pytest to codecov
        if: contains(env.SUBMIT_COVERAGE_VERSIONS, matrix.python-version)
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  tests-extended-qbt:
    #######
    # Run tests against recent qBittorrent releases and latest Python releases
    #######
    name: "Release Test 3.10 - v${{ matrix.QBT_VER }}"
    needs: [tests-smoke, verify]
    runs-on: ubuntu-20.04  # update Qt PPA when moving beyond 20.04
    continue-on-error: true
    timeout-minutes: 25
    strategy:
      matrix:
        QBT_VER: ${{ fromJson(needs.verify.outputs.qbittorrent-versions) }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.LATEST_PYTHON_VER }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}
          cache: 'pip'

      - name: Cache libtorrent ${{ env.LIBTORRENT_VER }}
        # set up cache for libtorrent library
        id: cache-libtorrent
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{ env.LIBTORRENT_INSTALLS }}/libtorrent_${{ env.LIBTORRENT_VER }}
          key: libtorrent-installs-${{ env.GH_CI_CACHE_VERSION }}-${{ runner.os }}-${{ env.LIBTORRENT_VER }}

      - name: Cache qBittorrent ${{ matrix.QBT_VER }}
        # set up cache for qBittorrent binary
        id: cache-qbittorrent
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{ env.QBITTORRENT_INSTALLS }}
          key: qbittorrent-installs-${{ env.GH_CI_CACHE_VERSION }}-${{ runner.os }}-${{ matrix.QBT_VER }}-${{ env.LIBTORRENT_VER }}

      - name: Install OS Build Dependencies (post v4.4.0)
        # qBt v4.4.0 requires >Qt v5.15.2....but that Qt isn't available from ubuntu PPAs until 21.04
        if: |
          (! contains(env.QT_USE_DEFAULT_PAA, matrix.QBT_VER))
          && (steps.cache-libtorrent.outputs.cache-hit != 'true') || (steps.cache-qbittorrent.outputs.cache-hit != 'true')
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-focal
          sudo apt update
          sudo apt install --no-install-recommends build-essential cmake ninja-build pkg-config git zlib1g-dev libssl-dev \
            libgeoip-dev automake libtool libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev
          sudo apt install --no-install-recommends qt515base qt515tools libqt5svg5-dev

      - name: Install OS Runtime Dependencies (post v4.4.0)
        # qBt v4.4.0 requires >Qt v5.15.2....but that Qt isn't available from ubuntu PPAs until 21.04
        if: (! contains(env.QT_USE_DEFAULT_PAA, matrix.QBT_VER))
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-focal
          sudo apt update
          sudo apt install --no-install-recommends qt515base qt515tools libqt5svg5-dev

      - name: Install OS Build Dependencies (pre v4.4.0)
        if: |
          contains(env.QT_USE_DEFAULT_PAA, matrix.QBT_VER)
          && (steps.cache-libtorrent.outputs.cache-hit != 'true') || (steps.cache-qbittorrent.outputs.cache-hit != 'true')
        run: |
          sudo apt update
          sudo apt install --no-install-recommends build-essential cmake ninja-build pkg-config git zlib1g-dev libssl-dev \
            libgeoip-dev automake libtool libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev

      - name: Install OS Runtime Dependencies (pre v4.4.0)
        if: contains(env.QT_USE_DEFAULT_PAA, matrix.QBT_VER)
        run: |
          sudo apt update
          sudo apt install --no-install-recommends qtbase5-dev qttools5-dev libqt5svg5-dev

      - name: Build libtorrent
        # if cache missed, build libtorrent library.
        if: steps.cache-libtorrent.outputs.cache-hit != 'true'
        run: |
          set -x
          SRC_DIR="$LIBTORRENT_INSTALLS/src"
          LIBTORRENT_INSTALL_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$LIBTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          git clone --recurse-submodules https://github.com/arvidn/libtorrent.git --branch v$LIBTORRENT_VER --depth 1
          cd libtorrent
          cmake \
            -B cmake-build-dir/Release \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$LIBTORRENT_INSTALL_DIR"
          cmake --build cmake-build-dir/Release --parallel $(nproc)
          cmake --install cmake-build-dir/Release

      - name: Build qBittorrent
        # if cache missed, compile qBittorrent binary
        if: steps.cache-qbittorrent.outputs.cache-hit != 'true'
        run: |
          set -x
          SRC_DIR="$QBITTORRENT_INSTALLS/src"
          QBITTORRENT_INSTALL_DIR="$QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}"
          LIBTORRENT_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$QBITTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          rm -rf qBittorrent
          git clone https://github.com/qbittorrent/qBittorrent.git --branch release-${{ matrix.QBT_VER }} --depth 1
          cd qBittorrent
          cmake \
            -G "Ninja" \
            -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$LIBTORRENT_DIR" \
            -DVERBOSE_CONFIGURE=ON \
            -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE \
            -DQBT_VER_STATUS= \
            -DGUI=OFF \
            -DCMAKE_INSTALL_PREFIX="$QBITTORRENT_INSTALL_DIR"
          cmake --build build --parallel $(nproc)
          cmake --install build

      - name: Install Python Dependencies
        # install the python dependencies to test qbittorrent-api
        run: |
          python -m pip install -U pip wheel setuptools
          python -m pip install .[test]

      - name: Test with pytest
        # finally....start qBittorrent and run tests via pytest
        run: |
          mkdir -p $HOME/Downloads  # default download location for qbittorrent
          export LD_LIBRARY_PATH="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER/lib/:$LD_LIBRARY_PATH"
          $QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}/bin/qbittorrent-nox --daemon
          python -c "import sys; print('Python', sys.version)"
          $QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}/bin/qbittorrent-nox -v
          export QBT_VER=${{ matrix.QBT_VER }}  # tell pytest which qbittorrent is being tested
          pytest

      - name: Upload Coverage to Codecov
        # send coverage report from pytest to codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  tests-legacy-qbt:
    #######
    # Run tests against old qBittorrent release and latest Python releases
    #######
    name: "Release Test Legacy 3.10 - v${{ matrix.QBT_VER }}"
    needs: [tests-smoke, verify]
    runs-on: ubuntu-20.04
    continue-on-error: true
    timeout-minutes: 25
    strategy:
      matrix:
        QBT_VER: ${{ fromJson(needs.verify.outputs.qbittorrent-legacy-versions) }}
        LIBTORRENT_VER: ["1.2.17"]
        include:
          - QBT_VER: "4.1.0"
            LIBTORRENT_VER: "1_1_14"
          - QBT_VER: "4.1.6"
            LIBTORRENT_VER: "1_1_14"
        exclude:
          - QBT_VER: "4.1.0"
            LIBTORRENT_VER: "1.2.17"
          - QBT_VER: "4.1.6"
            LIBTORRENT_VER: "1.2.17"
    steps:
      - name: Branch
        run: echo Branch ${{ github.ref }} ${{ github.head_ref }}

      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.LATEST_PYTHON_VER }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}
          cache: 'pip'

      - name: Cache libtorrent ${{ matrix.LIBTORRENT_VER }}
        # set up cache for libtorrent library
        id: cache-libtorrent
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{ env.LIBTORRENT_INSTALLS }}/libtorrent_${{ matrix.LIBTORRENT_VER }}
          key: libtorrent-installs-${{ env.GH_CI_CACHE_VERSION }}-${{ runner.os }}-${{ matrix.LIBTORRENT_VER }}

      - name: Cache qBittorrent ${{ matrix.QBT_VER }}
        # set up cache for qBittorrent binary legacy
        id: cache-qbittorrent
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{ env.QBITTORRENT_INSTALLS }}
          key: qbittorrent-installs-${{ env.GH_CI_CACHE_VERSION }}-${{ runner.os }}-${{ matrix.QBT_VER }}-${{ matrix.LIBTORRENT_VER }}

      - name: Install OS Build Dependencies
        if: (steps.cache-libtorrent.outputs.cache-hit != 'true') || (steps.cache-qbittorrent.outputs.cache-hit != 'true')
        run: |
          sudo apt update
          sudo apt install --no-install-recommends build-essential cmake ninja-build pkg-config git zlib1g-dev libssl-dev \
            libgeoip-dev automake libtool libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev

      - name: Install OS Runtime Dependencies
        run: |
          sudo apt update
          sudo apt install --no-install-recommends qtbase5-dev qttools5-dev libqt5svg5-dev

      - name: Build libtorrent
        # if cache missed, build libtorrent library.
        if: steps.cache-libtorrent.outputs.cache-hit != 'true'
        run: |
          set -x
          SRC_DIR="$LIBTORRENT_INSTALLS/src"
          if [ "${{ matrix.LIBTORRENT_VER }}" = "1_1_14" ];
          then
            LIBTORRENT_BRANCH="libtorrent-${{ matrix.LIBTORRENT_VER }}"
          else
            LIBTORRENT_BRANCH="v${{ matrix.LIBTORRENT_VER }}"
          fi
          LIBTORRENT_INSTALL_DIR="$LIBTORRENT_INSTALLS/libtorrent_${{ matrix.LIBTORRENT_VER }}"
          mkdir -p "$SRC_DIR" && mkdir -p "$LIBTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          git clone --recurse-submodules https://github.com/arvidn/libtorrent.git --branch $LIBTORRENT_BRANCH --depth 1
          cd libtorrent
          cmake \
            -B cmake-build-dir/Release \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$LIBTORRENT_INSTALL_DIR"
          cmake --build cmake-build-dir/Release --parallel $(nproc)
          cmake --install cmake-build-dir/Release

      - name: Build qBittorrent
        # if cache missed, compile an older version of qBittorrent, i.e. < v4.2.5
        if: steps.cache-qbittorrent.outputs.cache-hit != 'true'
        run: |
          set -x
          SRC_DIR="$QBITTORRENT_INSTALLS/src"
          QBITTORRENT_INSTALL_DIR="$QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}"
          LIBTORRENT_DIR="$LIBTORRENT_INSTALLS/libtorrent_${{ matrix.LIBTORRENT_VER }}"
          mkdir -p "$SRC_DIR" && mkdir -p "$QBITTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          rm -rf qBittorrent
          git clone https://github.com/qbittorrent/qBittorrent.git --branch release-${{ matrix.QBT_VER }} --depth 1
          cd qBittorrent
          export libtorrent_CFLAGS="$LIBTORRENT_DIR/include/"
          export libtorrent_LIBS="$LIBTORRENT_DIR/lib/libtorrent-rasterbar.so"
          ./configure \
            CXXFLAGS="-std=c++17" \
            CFLAGS="-I$LIBTORRENT_DIR/include/libtorrent" \
            --disable-gui \
            --prefix="$QBITTORRENT_INSTALL_DIR"
          make -j$(nproc) install

      - name: Install Python Dependencies
        # install the python dependencies to test qbittorrent-api
        run: |
          python -m pip install -U pip wheel setuptools
          python -m pip install .[test]

      - name: Test with pytest
        # finally....start qBittorrent and run tests via pytest
        run: |
          mkdir -p $HOME/Downloads  # default download location for qbittorrent
          export LD_LIBRARY_PATH="$LIBTORRENT_INSTALLS/libtorrent_${{ matrix.LIBTORRENT_VER }}/lib/:$LD_LIBRARY_PATH"
          $QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}/bin/qbittorrent-nox --daemon
          python -c "import sys; print('Python', sys.version)"
          $QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}/bin/qbittorrent-nox -v
          export QBT_VER=${{ matrix.QBT_VER }}  # tell pytest which qbittorrent is being tested
          pytest

      - name: Upload Coverage to Codecov
        # send coverage report from pytest to codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  tests-dev-qbt:
    #######
    # Run tests against dev versions of qBittorrent and latest Python releases
    #######
    name: "Dev Branch Test 3.10 - ${{ matrix.QBT_VER }}"
    needs: tests-smoke
    runs-on: ubuntu-20.04  # update Qt PPA when moving beyond 20.04
    continue-on-error: true
    timeout-minutes: 25
    env:
      IS_QBT_DEV: True
    strategy:
      matrix:
        QBT_VER: ["master", "v4_4_x", "v4_3_x"]
    steps:
      - name: Branch
        run: echo Branch ${{ github.ref }} ${{ github.head_ref }}

      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.LATEST_PYTHON_VER }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}
          cache: 'pip'

      - name: Cache libtorrent ${{ env.LIBTORRENT_VER }}
        # set up cache for libtorrent library
        id: cache-libtorrent
        uses: pat-s/always-upload-cache@v3.0.1
        with:
          path: ${{ env.LIBTORRENT_INSTALLS }}/libtorrent_${{ env.LIBTORRENT_VER }}
          key: libtorrent-installs-${{ env.GH_CI_CACHE_VERSION }}-${{ runner.os }}-${{ env.LIBTORRENT_VER }}

      - name: Install OS Build Dependencies
        run: |
          sudo apt update
          sudo apt install --no-install-recommends build-essential cmake ninja-build pkg-config git zlib1g-dev libssl-dev \
            libgeoip-dev automake libtool libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev

      - name: Install OS Runtime Dependencies
        # qBt v4.4.0 requires >Qt v5.15.2....but that Qt isn't available from ubuntu PPAs until 21.04
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-focal
          sudo apt update
          sudo apt install --no-install-recommends qt515base qt515tools libqt5svg5-dev

      - name: Build libtorrent
        # if cache missed, build libtorrent library.
        if: steps.cache-libtorrent.outputs.cache-hit != 'true'
        run: |
          set -x
          SRC_DIR="$LIBTORRENT_INSTALLS/src"
          LIBTORRENT_INSTALL_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$LIBTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          git clone --recurse-submodules https://github.com/arvidn/libtorrent.git --branch v$LIBTORRENT_VER --depth 1
          cd libtorrent
          cmake \
            -B cmake-build-dir/Release \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX="$LIBTORRENT_INSTALL_DIR"
          cmake --build cmake-build-dir/Release --parallel $(nproc)
          cmake --install cmake-build-dir/Release

      - name: Build qBittorrent ${{ matrix.QBT_VER }}
        run: |
          set -x
          SRC_DIR="$QBITTORRENT_INSTALLS/src"
          QBITTORRENT_INSTALL_DIR="$QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}"
          LIBTORRENT_DIR="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER"
          mkdir -p "$SRC_DIR" && mkdir -p "$QBITTORRENT_INSTALL_DIR"

          cd "$SRC_DIR"
          rm -rf qBittorrent
          git clone https://github.com/qbittorrent/qBittorrent.git --branch ${{ matrix.QBT_VER }} --depth 1
          cd qBittorrent
          cmake \
            -G "Ninja" \
            -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$LIBTORRENT_DIR" \
            -DVERBOSE_CONFIGURE=ON \
            -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=TRUE \
            -DQBT_VER_STATUS= \
            -DGUI=OFF \
            -DCMAKE_INSTALL_PREFIX="$QBITTORRENT_INSTALL_DIR"
          cmake --build build --parallel $(nproc)
          cmake --install build

      - name: Install Python Dependencies
        # install the python dependencies to test qbittorrent-api
        run: |
          python -m pip install -U pip wheel setuptools
          python -m pip install .[test]

      - name: Test with pytest
        run: |
          mkdir -p $HOME/Downloads  # default download location for qbittorrent
          export LD_LIBRARY_PATH="$LIBTORRENT_INSTALLS/libtorrent_$LIBTORRENT_VER/lib/:$LD_LIBRARY_PATH"
          $QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}/bin/qbittorrent-nox --daemon
          python -c "import sys; print('Python', sys.version)"
          $QBITTORRENT_INSTALLS/qbt_${{ matrix.QBT_VER }}/bin/qbittorrent-nox -v
          pytest

      - name: Upload Coverage to Codecov
        # send coverage report from pytest to codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Send mail
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ${{ github.job }} job of ${{ github.repository }} failed
          body: |
            ${{ github.job }} job in workflow ${{ github.workflow }} of ${{ github.repository }} failed.
            https://github.com/rmartin16/qbittorrent-api/actions/runs/${{ github.run_id }}
          to: rmartin16+github-action@gmail.com   # comma-separated string
          from: rmartin16+github-action@gmail.com

  package:
    #######
    # Verify build and packaging is successful
    #######
    name: Build & Verify Package
    needs: tests-smoke
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.LATEST_PYTHON_VER }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}
          cache: 'pip'

      - name: Install Build Tools
        run: python -m pip install -U pip setuptools wheel twine build

      - name: Build Package
        run: python -m build

      - name: List Result
        run: ls -l dist

      - name: Check long_description
        run: python -m twine check dist/*

  install-dev:
    #######
    # Verify package can be installed on all platforms
    #######
    name: Verify Dev Install
    needs: tests-smoke
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.LATEST_PYTHON_VER }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}
          cache: 'pip'

      - name: Install in Dev Mode
        run: |
          python -m pip install -U pip wheel setuptools
          python -m pip install -e .[test,dev]

      - name: Import Package
        run: python -c "from qbittorrentapi import Client; assert Client().host == 'localhost:8080'"

  docs-build:
    #######
    # Verify documentation build succeeds
    #######
    name: Verify Doc Build
    needs: tests-smoke
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Python ${{ env.LATEST_PYTHON_VER }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.LATEST_PYTHON_VER }}
          cache: 'pip'

      - name: Install Doc Build Requirements
        run: python -m pip install -r requirements-dev.txt

      - name: Build Docs
        run: |
          cd docs
          sphinx-build -v -W --keep-going -E -a -b linkcheck "source" "build"
          sphinx-build -v -W --keep-going -E -a -b html "source" "build"
          make html
